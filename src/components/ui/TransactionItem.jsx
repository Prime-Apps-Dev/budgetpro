// src/components/ui/TransactionItem.jsx
import React, { memo } from 'react';
import { ICONS } from '../icons';
import { motion } from 'framer-motion';
import { spring } from '../../utils/motion';
import { useAppContext } from '../../context/AppContext';
import LongPressWrapper from './LongPressWrapper';
import { AnimatePresence } from 'framer-motion';

/**
 * –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * —Å–≤–∞–π–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
 * @param {object} props.transaction - –û–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 * @param {function} props.onDelete - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è.
 * @param {function} props.onEdit - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {object} props.style - –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏.
 */
const TransactionItem = memo(({ transaction, onDelete, onEdit, style }) => {
  console.log('üü° TransactionItem rendered with transaction:', transaction?.id);
  console.log('üü° onDelete function exists:', typeof onDelete);
  console.log('üü° onEdit function exists:', typeof onEdit);

  const {
    getAccountByName,
    currencySymbol
  } = useAppContext();

  const account = getAccountByName(transaction.account);
  const IconComponent = account?.icon || ICONS.Wallet;

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
   * @param {string} dateString - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏.
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞.
   */
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
      return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    } else if (date.toDateString() === yesterday.toDateString()) {
      return '–í—á–µ—Ä–∞';
    } else {
      return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
    }
  };

  const handleEdit = () => {
    console.log('üü° TransactionItem handleEdit called for transaction:', transaction?.id);
    if (onEdit) onEdit(transaction);
  };
  
  const handleDelete = (receivedItem) => {
    console.log('üü° TransactionItem handleDelete called');
    console.log('üü° Received item:', receivedItem);
    console.log('üü° Transaction:', transaction);
    console.log('üü° onDelete function:', typeof onDelete);
    
    if (onDelete) {
      console.log('üü° Calling parent onDelete...');
      onDelete(receivedItem || transaction);
      console.log('üü° Parent onDelete called');
    } else {
      console.log('üî¥ ERROR: onDelete is not defined in TransactionItem!');
    }
  };
  
  return (
    <div style={style}>
        <LongPressWrapper
            onTap={() => {
              console.log('üü° TransactionItem tap');
            }} // –û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è TransactionItem –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            onLongPress={handleEdit}
            onSwipeLeft={handleDelete}
            swipeDeleteIcon={ICONS.Trash2}
            item={transaction} // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º transaction –∫–∞–∫ item
        >
            <div className="bg-white dark:bg-gray-800 rounded-xl px-4 py-3 border border-gray-100 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors duration-150">
                <div className="flex items-center justify-between">
                    {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å */}
                    <div className="flex items-center space-x-3 min-w-0 flex-1">
                        {/* –ò–∫–æ–Ω–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ü–≤–µ—Ç–æ–º */}
                        <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0"
                            style={{ backgroundColor: `${account?.color || '#6366f1'}20` }}
                        >
                            <IconComponent 
                                className="w-5 h-5" 
                                style={{ color: account?.color || '#6366f1' }} 
                            />
                        </div>
                        
                        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="min-w-0 flex-1">
                            <div className="flex items-center space-x-2">
                                <h3 className="font-medium text-gray-900 dark:text-gray-100 truncate">
                                    {transaction.category}
                                </h3>
                            </div>
                            
                            {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –æ–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ */}
                            {transaction.description && transaction.description.length <= 30 && (
                                <p className="text-sm text-gray-500 dark:text-gray-400 truncate mt-0.5">
                                    {transaction.description}
                                </p>
                            )}
                            
                            {/* –î–∞—Ç–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
                            <div className="flex items-center space-x-3 text-xs text-gray-400 dark:text-gray-500 mt-1">
                                <span>{formatDate(transaction.date)}</span>
                                {account && (
                                    <>
                                        <span>‚Ä¢</span>
                                        <span className="truncate">{account.name}</span>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>

                    {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å—É–º–º–∞ */}
                    <div className="text-right flex-shrink-0 ml-4">
                        <div className={`font-semibold ${
                            transaction.type === 'income' 
                                ? 'text-green-600 dark:text-green-400' 
                                : 'text-gray-900 dark:text-gray-100'
                        }`}>
                            {transaction.type === 'income' ? '+' : '‚àí'}{transaction.amount.toLocaleString()} {currencySymbol}
                        </div>
                    </div>
                </div>
            </div>
        </LongPressWrapper>
    </div>
  );
});

export default TransactionItem;